<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on x5113nc3x</title>
    <link>https://navichok26.github.io/posts/</link>
    <description>Recent content in Posts on x5113nc3x</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 13 Dec 2022 23:01:32 +0700</lastBuildDate><atom:link href="https://navichok26.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HTB 2022 Supernatural Hacks writeups</title>
      <link>https://navichok26.github.io/posts/htb_supernatural_hacks/</link>
      <pubDate>Tue, 13 Dec 2022 23:01:32 +0700</pubDate>
      
      <guid>https://navichok26.github.io/posts/htb_supernatural_hacks/</guid>
      <description>Reverse Potion Master (easy) Дан код на haskell-е:
import Data.Char (ord) import Data.Bits (xor) -- Complete the incantation... flag = &amp;#34;HTB{XXX}&amp;#34; extractFlag :: String -&amp;gt; String extractFlag (s:rest) | s == &amp;#39;H&amp;#39; || s == &amp;#39;T&amp;#39; || s == &amp;#39;B&amp;#39; = extractFlag rest | s == &amp;#39;{&amp;#39; &amp;amp;&amp;amp; last rest == &amp;#39;}&amp;#39; = init rest | otherwise = error (&amp;#34;Invalid format&amp;#34;) chunks :: Int -&amp;gt; [a] -&amp;gt; [[a]] chunks n l | n == 0 = [] | n == 1 = [[x] | x &amp;lt;- l] | length l &amp;lt;= n = [l] | otherwise = [take n l] ++ (chunks n (drop n l)) takeLast :: Int -&amp;gt; [a] -&amp;gt; [a] takeLast n = reverse .</description>
      <content>&lt;h1 id=&#34;reverse&#34;&gt;Reverse&lt;/h1&gt;
&lt;h2 id=&#34;potion-master-easy&#34;&gt;Potion Master (easy)&lt;/h2&gt;
&lt;p&gt;Дан код на haskell-е:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; Data.Char (&lt;span style=&#34;color:#a6e22e&#34;&gt;ord&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; Data.Bits (&lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;-- Complete the incantation...&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HTB{XXX}&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;extractFlag&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;extractFlag&lt;/span&gt; (s&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;rest)
  &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;H&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt;  s &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;T&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt;  s &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;B&amp;#39;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; extractFlag rest
  &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; last rest &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; init rest
  &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; otherwise &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Invalid format&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#a6e22e&#34;&gt;chunks&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; [a] &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; [[a]]
&lt;span style=&#34;color:#a6e22e&#34;&gt;chunks&lt;/span&gt; n l
  &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;[]&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [[x] &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; l]
  &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; length l &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [l]
  &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; otherwise &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [take n l] &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; (chunks n (drop n l))

&lt;span style=&#34;color:#a6e22e&#34;&gt;takeLast&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; [a] &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; [a]
&lt;span style=&#34;color:#a6e22e&#34;&gt;takeLast&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; reverse &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; take n &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; reverse

&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;106&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;119&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;116&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;125&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;102&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;]
&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;304&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;357&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;303&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;320&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;304&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;307&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;349&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;305&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;337&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;340&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;309&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;428&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;270&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt;]
&lt;span style=&#34;color:#a6e22e&#34;&gt;d&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;]

&lt;span style=&#34;color:#a6e22e&#34;&gt;checkFlag&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Bool&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;checkFlag&lt;/span&gt; flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
  length content &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
  all (&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;) (map (&lt;span style=&#34;color:#a6e22e&#34;&gt;\&lt;/span&gt; (l,r) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; l &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; r) (zip one a)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
  all (&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;) (map (&lt;span style=&#34;color:#a6e22e&#34;&gt;\&lt;/span&gt; (l,r) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; l &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; r) (zip two b)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
  all (&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;) (map (&lt;span style=&#34;color:#a6e22e&#34;&gt;\&lt;/span&gt; (l,r) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; l &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; r) (zip three c)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
  all (&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;) (map (&lt;span style=&#34;color:#a6e22e&#34;&gt;\&lt;/span&gt; (l,r) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; l &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; r) (zip four d))
  &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt; content &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map ord (extractFlag flag)
        one     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map (&lt;span style=&#34;color:#a6e22e&#34;&gt;\&lt;/span&gt; [l, r] &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; (l &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; r)) (chunks &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; content)
        two     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map (foldr xor &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) (chunks &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; content)
        three     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map (foldr (&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) (chunks &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; content)
        four     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map head (chunks &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; content)

&lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; putStrLn (&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (checkFlag flag)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The spell went off without a hitch!&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;You disappear in a puff of smoke!&amp;#34;&lt;/span&gt;
  )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Читаем код, обращаем особенное внимание на следующие строчки&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;  length content &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
  all (&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;) (map (&lt;span style=&#34;color:#a6e22e&#34;&gt;\&lt;/span&gt; (l,r) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; l &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; r) (zip one a)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
  all (&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;) (map (&lt;span style=&#34;color:#a6e22e&#34;&gt;\&lt;/span&gt; (l,r) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; l &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; r) (zip two b)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
  all (&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;) (map (&lt;span style=&#34;color:#a6e22e&#34;&gt;\&lt;/span&gt; (l,r) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; l &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; r) (zip three c)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
  all (&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;) (map (&lt;span style=&#34;color:#a6e22e&#34;&gt;\&lt;/span&gt; (l,r) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; l &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; r) (zip four d))
  &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt; content &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map ord (extractFlag flag)
        one     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map (&lt;span style=&#34;color:#a6e22e&#34;&gt;\&lt;/span&gt; [l, r] &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; (l &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; r)) (chunks &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; content)
        two     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map (foldr xor &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) (chunks &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; content)
        three     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map (foldr (&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) (chunks &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; content)
        four     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map head (chunks &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; content)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Сразу видим что длинна содержимого флага 58, а так же что массивы &lt;strong&gt;one&lt;/strong&gt; и &lt;strong&gt;a&lt;/strong&gt;,
&lt;strong&gt;two&lt;/strong&gt; и &lt;strong&gt;b&lt;/strong&gt; и тд сравниваются поэлементно.&lt;/p&gt;
&lt;p&gt;Понимаем, что берется содержимое внутри флага (между &lt;code&gt;HTB{&lt;/code&gt; и &lt;code&gt;}&lt;/code&gt;),
далее это все разбивается на чанки.&lt;/p&gt;
&lt;p&gt;Сначала на чанки по 2 символа, из первого символа вычитается второй и результат заносится в &lt;strong&gt;one&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Затем по 3, все 3 символа ксорятся, результат в &lt;strong&gt;two&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Далее в чанке по 4 символа символы складываются.&lt;/p&gt;
&lt;p&gt;А потом берется чанк размером 5 и в нем берется первый символ.&lt;/p&gt;
&lt;p&gt;Можно пойти в лоб и начать писать обратные функции, но я решил попробовать &lt;em&gt;z3&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Спустя некоторое время из меня вышел такой решатор.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; z3 &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; operator &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; xor
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; functools &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; reduce

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;chunks&lt;/span&gt;(lst, n):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(lst), n):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; lst[i:i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; n]

a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;106&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;119&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;116&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;125&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;102&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;]
c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;304&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;357&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;303&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;320&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;304&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;307&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;349&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;305&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;337&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;340&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;309&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;428&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;270&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt;]
d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;]

flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [BitVec(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;)]
a_solver &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [flag[i] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; flag[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)]
b_solver &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [reduce(xor, i) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; list(chunks(flag, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;))]
c_solver &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [sum(i) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; list(chunks(flag, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;))]
d_solver &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [BV2Int(i[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; list(chunks(flag, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;))]

s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Solver()

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(flag)):
	s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(And(flag[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;255&lt;/span&gt;, flag[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(a_solver)):
	s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(a_solver[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; a[i])

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(b_solver)):
	s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(b_solver[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; b[i])

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(c_solver)):
	s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(c_solver[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; c[i])

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(d_solver)):
	s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(d_solver[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; d[i])

print(s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;check())
h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;model()
k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(h)):
	k&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(chr(h&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;evaluate(flag[i])&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;as_long()))
print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HTB{&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(k) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;}&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Флаг: &lt;code&gt;HTB{4_m0n4d_15_ju57_4_m0n01d_1n_7h3_c47360ry_0f_3nd0func70r5!!}&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;pwn&#34;&gt;Pwn&lt;/h1&gt;
&lt;h2 id=&#34;sacred-scrolls-easy&#34;&gt;Sacred Scrolls (easy)&lt;/h2&gt;
&lt;p&gt;Дан бинарь&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;sacred_scrolls&#34;&gt;sacred_scrolls&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Пытаемся сразу запустить и видим такую картину&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt;
&lt;p&gt;Начинаем реверсить в ghidra&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;2.png&#34; alt=&#34;2&#34;&gt;&lt;/p&gt;
&lt;p&gt;Видим &lt;code&gt;system&lt;/code&gt; и &lt;code&gt;strcat&lt;/code&gt; перед вызовом &lt;code&gt;system&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Также видим что гидра не распарсила строки и представила их в виде чисел.
Открываем &lt;em&gt;Script Manager&lt;/em&gt; находим &lt;em&gt;SearchSimpleStackStrings&lt;/em&gt;, нажимаем и видим нормальные строки&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;3.png&#34; alt=&#34;3&#34;&gt;&lt;/p&gt;
&lt;p&gt;Теперь понятно, наш ввод помещается в сл комманду &lt;code&gt;echo &#39;input&#39; | base64 -d &amp;gt; spell.zip&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Поэтому пишем простую bash injection, на код выше даже не смотрим, он пропускает все символы которые нам нужны&lt;/p&gt;
&lt;p&gt;Решение: &lt;code&gt;&#39;; cat flag.txt; echo &#39;34&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Флаг: &lt;code&gt;HTB{r3t2l1bc_4_51mpl3_5p3ll_but_qu13t_unbr34k4bl3}&lt;/code&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Whoami</title>
      <link>https://navichok26.github.io/posts/whoami/</link>
      <pubDate>Wed, 23 Nov 2022 10:55:32 +0700</pubDate>
      
      <guid>https://navichok26.github.io/posts/whoami/</guid>
      <description>Привет Я x5113nc3x</description>
      <content>&lt;h1 id=&#34;привет&#34;&gt;Привет&lt;/h1&gt;
&lt;p&gt;Я &lt;code&gt;x5113nc3x&lt;/code&gt;&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
